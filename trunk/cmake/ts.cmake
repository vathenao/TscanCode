set(TS_CMAKE_DIR ${CMAKE_CURRENT_LIST_DIR} CACHE INTERNAL "ts cmake script directory")
set(STDAFX_PCH_H ${CMAKE_SOURCE_DIR}/stdafx.h)
set(STDAFX_PCH_C ${CMAKE_SOURCE_DIR}/stdafx.cpp)

if(WIN32)
	include("${TS_CMAKE_DIR}/msvcpch.cmake")
endif()

#编译选项默认设置
#默认编译器为VS2019
if(NOT CMAKE_GENERATOR)
set(CMAKE_GENERATOR,"Visual Studio 16 2019")
endif()

#设置构建类型 mui-config生成器的构建类型由CMAKE_CONFIGURATION_TYPES指定（如VS,VC）
if(CMAKE_BUILD_TYPE MATCHES "Debug" OR CMAKE_BUILD_TYPE MATCHES "None")
    SET(BUILD_TYPE "Debug")
    message("Generated with config types: ${BUILD_TYPE}")
elseif(CMAKE_BUILD_TYPE MATCHES "Release")
    SET(BUILD_TYPE "Release")
    message("Generated with config types: ${BUILD_TYPE}")
elseif(CMAKE_BUILD_TYPE MATCHES "RelWitchDebInfo")
    SET(BUILD_TYPE "RelWitchDebInfo")
    message("Generated with config types: ${BUILD_TYPE}")
elseif(CMAKE_BUILD_TYPE MATCHES "MinSizeRel")
    SET(BUILD_TYPE "MinSizeRel")
    message("Generated with config types: ${BUILD_TYPE}")
else()
    SET(BUILD_TYPE "Debug")
    message("Generated with config types: ${BUILD_TYPE}")
endif()

SET(CMAKE_CONFIGURATION_TYPES ${BUILD_TYPE})

macro(list_element list_ref list_index element_ref)
	list(GET ${list_ref} ${list_index} ${element_ref})
	list(REMOVE_AT ${list_ref} ${list_index})
endmacro()

macro(impl_files_filter args_ref)
	set(_argn ${ARGN})
	set(_a)
	while(NOT "!${_argn}" STREQUAL "!")
		list_element(_argn 0 _a)
		if(_a MATCHES "(^WIN$|^UNIX$|^LINUX$|^MAC$|^OSX$|^IOS$|^BSD$)")
			list(GET _argn 0 _b)
			if("!${_b}" STREQUAL "!(")
				list(REMOVE_AT _argn 0)
				if(OS_${_a})
					impl_files_filter(${args_ref} ${_argn})
				else()
					_del_args()
				endif()
			else()
				list(APPEND ${args_ref} "${_a}")
			endif()
		elseif("!${_a}" STREQUAL "!)")
			break()
		else()
			list(APPEND ${args_ref} "${_a}")
		endif()
	endwhile()
endmacro()

macro(_args_files_filter args_ref)
	set(${args_ref})
	impl_files_filter(${args_ref} ${ARGN})
endmacro()

macro(_output_location name type outputdir)
	if(${type} MATCHES STATIC)
	if(BUILD_TYPE MATCHES "Debug")
		set_target_properties(${name} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${outputdir})
		set_target_properties(${name} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${outputdir})
	elseif(BUILD_TYPE MATCHES "Release")
		set_target_properties(${name} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${outputdir})
		set_target_properties(${name} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${outputdir})
	else()
		set_target_properties(${name} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${outputdir})
	endif()
elseif(${type} MATCHES SHARED)
	#基于windows的平台类型
	if(WIN32)
		if(BUILD_TYPE MATCHES "Debug")
			set_target_properties(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${outputdir})
			set_target_properties(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${outputdir})
		elseif(BUILD_TYPE MATCHES "Release")
		 	set_target_properties(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${outputdir})
			set_target_properties(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${outputdir})
		else()
			set_target_properties(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${outputdir})
		endif()
	elseif(UNIX)	#基于UNIX的平台类型
		if(BUILD_TYPE MATCHES "Debug")
			set_target_properties(${name} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${outputdir})
			set_target_properties(${name} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG ${outputdir})
		elseif(BUILD_TYPE MATCHES "Release")
		 	set_target_properties(${name} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${outputdir})
			set_target_properties(${name} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELEASE ${outputdir})
		else()
			set_target_properties(${name} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${outputdir})
		endif()
	else()
		message(FATAL_ERROR "Unsupported platform type: ${CMAKE_SYSTEM_NAME}")
	endif()
elseif(${type} MATCHES MODULE) #暂未实现
	message(FATAL_ERROR "type ${type} do not implement yet.")
else()
	message(FATAL_ERROR "Unrecognized library type ${type}")
endif()
endmacro()

macro(ts_add_sources)
if(NOT SOURCE_FILES)
	SET(SOURCE_FILES)
endif()
	_args_files_filter(_cur_system_argn ${ARGN})
	foreach(_f ${_cur_system_argn})
		if(_f MATCHES "(PCH|QT4_AUTOMOC)")
		else()
			if(WIN32)
				string(TOLOWER "${_f}" _f)
			endif()
			if(_f MATCHES "(\\.c|\\.cc|\\.cpp|\\.cxx)")
			elseif(_f MATCHES "(\\.h|\\.hh|\\.hpp|\\.hxx)")
			elseif(_f MATCHES "(\\.m|\\.mm)")
			elseif(_f MATCHES "(\\.inl)")
			elseif(_f MATCHES "(\\.l|\\.y)")
			elseif(_f MATCHES "(\\.rc|\\.idl|\\.rc)")
			elseif(_f MATCHES "(\\.ui|\\.qrc|\\.ts)")
			elseif(_f MATCHES "(\\.plist)")
			elseif(_f MATCHES "(\\.js)")
			elseif(_f MATCHES "(\\.incl)")
			elseif(_f MATCHES "(\\.def)")
				set(TS_CURRENT_PACKAGE_LINK_DEF_FILE ${_f})
			else()
				message(FATAL_ERROR "Unrecognized source file ${_f}")
			endif()
		endif()
		LIST(APPEND SOURCE_FILES ${_f})
	endforeach()
	unset(_cur_system_argn)
endmacro()

macro(ts_include_directories)
	_args_files_filter(_cur_system_argn ${ARGN})
	include_directories(${_cur_system_argn})
	unset(_cur_system_argn)
endmacro()

macro(ts_include_packages)
	_args_files_filter(_cur_system_argn ${ARGN})
	foreach(_pkg ${_cur_system_argn})
		if(NOT TARGET ${_pkg})
			message(FATAL_ERROR "${_pkg} is not a valid package.")
		endif()
		get_property(_pkg_type TARGET ${_pkg} PROPERTY TS_PACKAGE_TYPE)
		if(NOT ${_pkg_type} STREQUAL "NONE")
			get_property(_pub_dir TARGET ${_pkg} PROPERTY TS_PUBLIC_HEADER_DIR)
			include_directories(${_pub_dir})
			list(APPEND TS_CURRENT_PACKAGE_DEPEND_PKGS ${_pkg})
			list(APPEND TS_CURRENT_PACKAGE_INCLUDE_PKG_DIRS ${_pub_dir})
		endif()
	endforeach()
	unset(_cur_system_argn)
endmacro()
	
macro(ts_add_subdirectory dir)
add_subdirectory(${dir})
endmacro()

macro(ts_add_definitions)
	ADD_DEFINITIONS(${ARGN})
endmacro()

macro(ts_add_resource input output)
configure_file(${input} ${output})
endmacro()

macro(ts_add_resources output)
	message(STATUS "ts_add_resources:${output}")
	_args_files_filter(_cur_system_argn ${ARGN})
	foreach(_f ${_cur_system_argn})
		SET(fullName ${CMAKE_CURRENT_SOURCE_DIR}/${_f})
		if(NOT EXISTS ${fullName})
			message(FATAL_ERROR "${fullName} is not found!")
		endif()
		string(FIND ${fullName} "/" pos REVERSE)
		string(SUBSTRING ${fullName} ${pos} -1 fileName)
		configure_file(${fullName} ${output}/${fileName})
		message(STATUS "copy ${output}/${fileName} done")
	endforeach()
	unset(fullName)
	unset(_cur_system_argn)
endmacro()

macro(ts_add_library name type outputdir)
if(NOT TARGET_NAME)
	SET(TARGET_NAME ${name})
endif()
ADD_LIBRARY(${TARGET_NAME} ${type} ${SOURCE_FILES})
_output_location(${name} ${type} ${outputdir})
endmacro()

macro(ts_add_executable name outputdir)
if(NOT TARGET_NAME)
	SET(TARGET_NAME ${name})
endif()
add_executable(${TARGET_NAME} ${SOURCE_FILES})
_output_location(${name} SHARED ${outputdir})
endmacro()

macro(ts_link_libraries)
	target_link_libraries(${TARGET_NAME} ${ARGN})
endmacro()